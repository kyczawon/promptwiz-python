# coding: utf-8

"""
    PromptWiz API - OpenAPI 3.1

    ### Context PromptWiz API provides a way to execute prompts defined in the UI. The API will return the results from OpenAI with fields populated based on your inputs and the result will be stored in PromptWiz for the purpose of analysis  ### Pre-requisites 1. You must create a prompt, and prompt version (and save it) 2. A prompt version must be set as ‘active’ in the prompt page 3. You must have a Open API Key set under api_keys page ## API modes 1. **Full result** - when stream is False, the API returns a single JSON response with the outcome of each query from querySet.     - Multiple requests are done in concurrent fashion for optimal response times 2. **Streaming** - when stream is True, the API returns multiple JSON responses through a Streaming response. The response body will have the exact same envelope as the full result mode, with the only difference being that the results field will contain the deltas that have been streamed by the model.     - Multiple requests are done in concurrent fashion & the streams will return on ‘first come first served’ basis. This means that envelopes might arrive out of order and you should rely on linkid to combine responses correctly.

    The version of the OpenAPI document: 0.1
    Contact: contact@promptwiz.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class Result(BaseModel):
    """
    Result
    """
    link_id: StrictInt = Field(..., alias="linkId", description="The ID of the prompt, available on the PromptWiz web application")
    prompt_id: StrictInt = Field(..., alias="promptId", description="The ID of the prompt, available on the PromptWiz web application")
    prompt_version_number: StrictInt = Field(..., alias="promptVersionNumber", description="The version of the prompt used, available on the PromptWiz web application")
    results: Optional[Any] = Field(..., description="The model responses indexed by choice as specified by results_size input parameter<br /><br />  **streaming:** the results will contain the deltas sent over by the model")
    time: Union[StrictFloat, StrictInt] = Field(..., description="The time the model evaluation took in seconds")
    input_spend: Union[StrictFloat, StrictInt] = Field(..., alias="inputSpend", description="The cost of the input for the model evaluation in the model’s cost units (e.g. tokens)")
    choices_spend: Optional[Any] = Field(..., alias="choicesSpend", description="The cost of each choice output indexed by the same choices index as results.<br /><br />  **streaming:** this contains the accumulated cost up to and including the current delta in envelope")
    output_spend: Union[StrictFloat, StrictInt] = Field(..., alias="outputSpend", description="The total cost of the output for the model evaluation in the model’s cost units (e.g. tokens). The sum of outputSpend equals<br /><br />  **streaming:** this contains the accumulated total cost.")
    __properties = ["linkId", "promptId", "promptVersionNumber", "results", "time", "inputSpend", "choicesSpend", "outputSpend"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Result:
        """Create an instance of Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if results (nullable) is None
        # and __fields_set__ contains the field
        if self.results is None and "results" in self.__fields_set__:
            _dict['results'] = None

        # set to None if choices_spend (nullable) is None
        # and __fields_set__ contains the field
        if self.choices_spend is None and "choices_spend" in self.__fields_set__:
            _dict['choicesSpend'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Result:
        """Create an instance of Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Result.parse_obj(obj)

        _obj = Result.parse_obj({
            "link_id": obj.get("linkId"),
            "prompt_id": obj.get("promptId"),
            "prompt_version_number": obj.get("promptVersionNumber"),
            "time": obj.get("time"),
            "input_spend": obj.get("inputSpend"),
            "output_spend": obj.get("outputSpend")
        })
        return _obj


