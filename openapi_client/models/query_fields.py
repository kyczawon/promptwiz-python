# coding: utf-8

"""
    PromptWiz API - OpenAPI 3.1

    ### Context PromptWiz API provides a way to execute prompts defined in the UI. The API will return the results from OpenAI with fields populated based on your inputs and the result will be stored in PromptWiz for the purpose of analysis  ### Pre-requisites 1. You must create a prompt, and prompt version (and save it) 2. A prompt version must be set as ‘active’ in the prompt page 3. You must have a Open API Key set under api_keys page ## API modes 1. **Full result** - when stream is False, the API returns a single JSON response with the outcome of each query from querySet.     - Multiple requests are done in concurrent fashion for optimal response times 2. **Streaming** - when stream is True, the API returns multiple JSON responses through a Streaming response. The response body will have the exact same envelope as the full result mode, with the only difference being that the results field will contain the deltas that have been streamed by the model.     - Multiple requests are done in concurrent fashion & the streams will return on ‘first come first served’ basis. This means that envelopes might arrive out of order and you should rely on linkid to combine responses correctly.

    The version of the OpenAPI document: 0.1
    Contact: contact@promptwiz.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class QueryFields(BaseModel):
    """
    QueryFields
    """
    prompt_id: StrictInt = Field(..., alias="promptId", description="The ID of the prompt, available on the PromptWiz web application")
    variables: Optional[Any] = Field(None, description="A JSON of key-value pairs.<br /><br />  The keys are the prompt variables and the values are their assigned values.<br /><br />  A value must be assigned to every prompt parameter.<br /><br />  **This field can be omitted only if the prompt has no parameters.**<br /><br />")
    link_id: Optional[StrictInt] = Field(None, alias="linkId", description="An ID used to link a result in the response to a query in the request. This simplifies matching request on your backend if you’re making more than 1 request at a time.<br /><br />  If this field is omitted, PromptWiz will assign each query its index as the link ID.<br /><br />  If this field is provided in any query in the query set, it must be provided on all.<br /><br />  If this field is provided in the queries, it must be unique across the queries.<br /><br />")
    model_api_key: Optional[StrictStr] = Field(None, alias="modelApiKey", description="An API key for the model service (e.g. OpenAI) to be queried. This allows for an override to the organisation’s API key saved under the [api_keys](https://promptwiz.co.uk/api_keys/) page. Please keep in mind if this parameter is used, the value may have to be updated if the model service is changed in a newer prompt version.")
    result_size: Optional[StrictInt] = Field(None, alias="resultSize", description="The number of results to generate.")
    __properties = ["promptId", "variables", "linkId", "modelApiKey", "resultSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryFields:
        """Create an instance of QueryFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if variables (nullable) is None
        # and __fields_set__ contains the field
        if self.variables is None and "variables" in self.__fields_set__:
            _dict['variables'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryFields:
        """Create an instance of QueryFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryFields.parse_obj(obj)

        _obj = QueryFields.parse_obj({
            "prompt_id": obj.get("promptId"),
            "link_id": obj.get("linkId"),
            "model_api_key": obj.get("modelApiKey"),
            "result_size": obj.get("resultSize")
        })
        return _obj


